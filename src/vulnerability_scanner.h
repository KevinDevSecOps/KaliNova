cat > src/vulnerability_scanner/VulnerabilityScanner.h << 'EOL'
#ifndef VULNERABILITYSCANNER_H
#define VULNERABILITYSCANNER_H

#include <iostream>
#include <vector>
#include <string>
#include <thread>
#include <mutex>
#include <map>
#include <curl/curl.h>

class VulnerabilityScanner {
private:
    std::vector<std::string> targetHosts;
    std::map<std::string, std::vector<std::string>> vulnerabilities;
    std::mutex vulnMutex;
    
    // Callback para cURL
    static size_t WriteCallback(void* contents, size_t size, size_t nmemb, std::string* response);
    
public:
    VulnerabilityScanner(const std::vector<std::string>& hosts);
    void scanCommonVulnerabilities();
    void checkSQLInjection(const std::string& host);
    void checkXSS(const std::string& host);
    void checkCommandInjection(const std::string& host);
    void checkMisconfigurations(const std::string& host);
    bool simulateHttpRequest(const std::string& host, const std::string& payload);
    void generateReport() const;
};

#endif
EOL