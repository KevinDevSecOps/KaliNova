.PHONY: build test install clean

build:
	@echo "Building KaliNova installer..."
	cargo build --release

test:
	@echo "Running tests..."
	cargo test --verbose

install: build
	@echo "Installing..."
	sudo cp target/release/kalinova-installer /usr/local/bin/
	sudo mkdir -p /etc/kalinova
	sudo cp config/modules.yaml /etc/kalinova/
	sudo mkdir -p /opt/kalinova/scripts
	sudo cp -r scripts/ /opt/kalinova/

docker-build:
	@echo "Building Docker image..."
	docker build -t kalinova-installer .

docker-run:
	docker run -it --rm kalinova-installer list

clean:
	@echo "Cleaning..."
	cargo clean
	rm -f /usr/local/bin/kalinova-installer

help:
	@echo "Available targets:"
	@echo "  build       - Build the installer"
	@echo "  test        - Run tests"
	@echo "  install     - Install to system"
	@echo "  docker-build - Build Docker image"
	@echo "  docker-run  - Run in Docker"
	@echo "  clean       - Clean build artifacts"

# Instalar en el sistema
install: all
	@echo "Instalando KaliNova en el sistema..."
	sudo cp $(MAIN_BIN) /usr/local/bin/kalinova
	sudo cp $(TEST_SCANNER_BIN) /usr/local/bin/test_scanner
	sudo cp $(TEST_NETWORK_BIN) /usr/local/bin/test_analyzer
	sudo cp $(TEST_FUZZER_BIN) /usr/local/bin/test_fuzzer
	@echo "Instalación completada."

# Desinstalar
uninstall:
	@echo "Desinstalando KaliNova..."
	sudo rm -f /usr/local/bin/kalinova
	sudo rm -f /usr/local/bin/test_scanner
	sudo rm -f /usr/local/bin/test_analyzer
	sudo rm -f /usr/local/bin/test_fuzzer
	@echo "Desinstalación completada."

# Ayuda
help:
	@echo "Makefile para KaliNova - Opciones disponibles:"
	@echo "  make all        - Compila todo el proyecto (por defecto)"
	@echo "  make debug      - Compila con información de depuración"
	@echo "  make clean      - Limpia los archivos compilados"
	@echo "  make install    - Instala en el sistema"
	@echo "  make uninstall  - Desinstala del sistema"
	@echo "  make help       - Muestra esta ayuda"

# Crear archivos base si no existen
setup:
	@echo "Creando estructura base del proyecto..."
	
	# Crear archivo principal si no existe
	if [ ! -f "$(MAIN_SOURCE)" ]; then \
		echo "Creando $(MAIN_SOURCE)..."; \
		echo '#include <iostream>' > $(MAIN_SOURCE); \
		echo '#include "vulnerability_scanner/VulnerabilityScanner.h"' >> $(MAIN_SOURCE); \
		echo '#include "network_analyzer/NetworkAnalyzer.h"' >> $(MAIN_SOURCE); \
		echo '#include "advanced_fuzzer/AdvancedFuzzer.h"' >> $(MAIN_SOURCE); \
		echo 'int main() { std::cout << "KaliNova iniciado\\n"; return 0; }' >> $(MAIN_SOURCE); \
	fi
	
	# Crear tests básicos si no existen
	if [ ! -f "$(TEST_SCANNER_SOURCE)" ]; then \
		echo "Creando $(TEST_SCANNER_SOURCE)..."; \
		echo '#include "VulnerabilityScanner.h"' > $(TEST_SCANNER_SOURCE); \
		echo '#include <iostream>' >> $(TEST_SCANNER_SOURCE); \
		echo 'int main() {' >> $(TEST_SCANNER_SOURCE); \
		echo '    std::cout << "Testing Vulnerability Scanner...\\n";' >> $(TEST_SCANNER_SOURCE); \
		echo '    return 0;' >> $(TEST_SCANNER_SOURCE); \
		echo '}' >> $(TEST_SCANNER_SOURCE); \
	fi
	
	@echo "Estructura base creada. Ejecuta 'make all' para compilar."

.PHONY: all clean install uninstall help directories debug setup
# Editar el Makefile existente y agregar las referencias al Advanced Fuzzer

# Agregar estas líneas en las secciones correspondientes:

# Después de la definición de NETWORK_SOURCES
FUZZER_SOURCES = $(FUZZER_DIR)/AdvancedFuzzer.cpp

# Después de la definición de TEST_NETWORK_SOURCE
TEST_FUZZER_SOURCE = $(FUZZER_DIR)/test_fuzzer.cpp

# Después de la definición de NETWORK_OBJ
FUZZER_OBJ = $(OBJ_DIR)/AdvancedFuzzer.o
TEST_FUZZER_OBJ = $(OBJ_DIR)/test_fuzzer.o

# Después de la definición de TEST_NETWORK_BIN
TEST_FUZZER_BIN = $(BIN_DIR)/test_fuzzer

# Agregar esta regla después de las reglas del network analyzer
$(TEST_FUZZER_BIN): $(TEST_FUZZER_OBJ) $(FUZZER_OBJ)
	@echo "Enlazando test del fuzzer..."
	$(CC) $(CFLAGS) $^ -o $@ $(LIBS)

# Agregar esta regla de compilación
$(OBJ_DIR)/%.o: $(FUZZER_DIR)/%.cpp
	@echo "Compilando $<..."
	$(CC) $(CFLAGS) -c $< -o $@

# Actualizar el target all para incluir el test del fuzzer
all: directories $(SCANNER_BIN) $(TEST_NETWORK_BIN) $(TEST_FUZZER_BIN)
# Editar el Makefile existente y agregar las referencias al Network Analyzer

# Agregar estas líneas en las secciones correspondientes:

# Después de la definición de SCANNER_SOURCES
NETWORK_SOURCES = $(NETWORK_DIR)/NetworkAnalyzer.cpp

# Después de la definición de TEST_SCANNER_SOURCE
TEST_NETWORK_SOURCE = $(NETWORK_DIR)/test_analyzer.cpp

# Después de la definición de SCANNER_OBJ
NETWORK_OBJ = $(OBJ_DIR)/NetworkAnalyzer.o
TEST_NETWORK_OBJ = $(OBJ_DIR)/test_analyzer.o

# Después de la definición de TEST_SCANNER_BIN
TEST_NETWORK_BIN = $(BIN_DIR)/test_analyzer

# Agregar esta regla después de las reglas del scanner
$(TEST_NETWORK_BIN): $(TEST_NETWORK_OBJ) $(NETWORK_OBJ)
	@echo "Enlazando test del analizador de red..."
	$(CC) $(CFLAGS) $^ -o $@ $(LIBS)

# Agregar esta regla de compilación
$(OBJ_DIR)/%.o: $(NETWORK_DIR)/%.cpp
	@echo "Compilando $<..."
	$(CC) $(CFLAGS) -c $< -o $@

# Actualizar el target all para incluir el test del network analyzer
all: directories $(SCANNER_BIN) $(TEST_NETWORK_BIN)
